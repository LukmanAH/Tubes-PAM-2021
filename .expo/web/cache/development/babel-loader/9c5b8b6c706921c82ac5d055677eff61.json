{"ast":null,"code":"import { Extrapolate } from \"../derived/interpolate\";\n\nvar internalInterpolate = function () {\n  var _f = function _f(x, l, r, ll, rr, type) {\n    if (r - l === 0) return ll;\n    var progress = (x - l) / (r - l);\n    var val = ll + progress * (rr - ll);\n    var coef = rr >= ll ? 1 : -1;\n    type = type || Extrapolate.EXTEND;\n\n    if (coef * val < coef * ll || coef * val > coef * rr) {\n      switch (type) {\n        case Extrapolate.IDENTITY:\n          return x;\n\n        case Extrapolate.CLAMP:\n          if (coef * val < coef * ll) {\n            return ll;\n          }\n\n          return rr;\n\n        case Extrapolate.EXTEND:\n        default:\n          return val;\n      }\n    }\n\n    return val;\n  };\n\n  _f._closure = {\n    Extrapolate: {\n      EXTEND: Extrapolate.EXTEND,\n      IDENTITY: Extrapolate.IDENTITY,\n      CLAMP: Extrapolate.CLAMP\n    }\n  };\n  _f.asString = \"function internalInterpolate(x,l,r,ll,rr,type){const{Extrapolate}=jsThis._closure;{if(r-l===0)return ll;var progress=(x-l)/(r-l);var val=ll+progress*(rr-ll);var coef=rr>=ll?1:-1;type=type||Extrapolate.EXTEND;if(coef*val<coef*ll||coef*val>coef*rr){switch(type){case Extrapolate.IDENTITY:return x;case Extrapolate.CLAMP:if(coef*val<coef*ll){return ll;}return rr;case Extrapolate.EXTEND:default:return val;}}return val;}}\";\n  _f.__workletHash = 16794550962941;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nexport var interpolate = function () {\n  var _f = function _f(x, input, output, type) {\n    if (x && x.__nodeID) {\n      throw new Error('Reanimated: interpolate from V1 has been renamed to interpolateNode.');\n    }\n\n    var length = input.length;\n    var narrowedInput = [];\n\n    if (x < input[0]) {\n      narrowedInput = [input[0], input[1], output[0], output[1]];\n    } else if (x > input[length - 1]) {\n      narrowedInput = [input[length - 2], input[length - 1], output[length - 2], output[length - 1]];\n    } else {\n      for (var i = 1; i < length; ++i) {\n        if (x <= input[i]) {\n          narrowedInput = [input[i - 1], input[i], output[i - 1], output[i]];\n          break;\n        }\n      }\n    }\n\n    return internalInterpolate.apply({}, [x].concat(narrowedInput).concat(type));\n  };\n\n  _f._closure = {\n    internalInterpolate: internalInterpolate\n  };\n  _f.asString = \"function interpolate(x,input,output,type){const{internalInterpolate}=jsThis._closure;{if(x&&x.__nodeID){throw new Error('Reanimated: interpolate from V1 has been renamed to interpolateNode.');}var length=input.length;var narrowedInput=[];if(x<input[0]){narrowedInput=[input[0],input[1],output[0],output[1]];}else if(x>input[length-1]){narrowedInput=[input[length-2],input[length-1],output[length-2],output[length-1]];}else{for(var i=1;i<length;++i){if(x<=input[i]){narrowedInput=[input[i-1],input[i],output[i-1],output[i]];break;}}}return internalInterpolate.apply({},[x].concat(narrowedInput).concat(type));}}\";\n  _f.__workletHash = 13867398897915;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();","map":{"version":3,"sources":["C:/Users/PC NOOB/Downloads/fixlast/Tubes-PAM-2021-React-Native/node_modules/react-native-reanimated/src/reanimated2/interpolation.js"],"names":["Extrapolate","internalInterpolate","x","l","r","ll","rr","type","progress","val","coef","EXTEND","IDENTITY","CLAMP","interpolate","input","output","__nodeID","Error","length","narrowedInput","i","apply","concat"],"mappings":"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","sourcesContent":["import { Extrapolate } from '../derived/interpolate';\r\n\r\nfunction internalInterpolate(x, l, r, ll, rr, type) {\r\n  'worklet';\r\n  if (r - l === 0) return ll;\r\n  const progress = (x - l) / (r - l);\r\n  const val = ll + progress * (rr - ll);\r\n  const coef = rr >= ll ? 1 : -1;\r\n\r\n  // TODO: support default values in worklets:\r\n  // e.g. function interplate(x, input, output, type = Extrapolate.CLAMP)\r\n  type = type || Extrapolate.EXTEND;\r\n\r\n  if (coef * val < coef * ll || coef * val > coef * rr) {\r\n    switch (type) {\r\n      case Extrapolate.IDENTITY:\r\n        return x;\r\n      case Extrapolate.CLAMP:\r\n        if (coef * val < coef * ll) {\r\n          return ll;\r\n        }\r\n        return rr;\r\n      case Extrapolate.EXTEND:\r\n      default:\r\n        return val;\r\n    }\r\n  }\r\n  return val;\r\n}\r\n\r\nexport function interpolate(x, input, output, type) {\r\n  'worklet';\r\n  if (x && x.__nodeID) {\r\n    throw new Error(\r\n      'Reanimated: interpolate from V1 has been renamed to interpolateNode.'\r\n    );\r\n  }\r\n  const length = input.length;\r\n  let narrowedInput = [];\r\n  if (x < input[0]) {\r\n    narrowedInput = [input[0], input[1], output[0], output[1]];\r\n  } else if (x > input[length - 1]) {\r\n    narrowedInput = [\r\n      input[length - 2],\r\n      input[length - 1],\r\n      output[length - 2],\r\n      output[length - 1],\r\n    ];\r\n  } else {\r\n    for (let i = 1; i < length; ++i) {\r\n      if (x <= input[i]) {\r\n        narrowedInput = [input[i - 1], input[i], output[i - 1], output[i]];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return internalInterpolate.apply({}, [x].concat(narrowedInput).concat(type));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}